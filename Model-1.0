import pandas as pd
from sklearn import linear_model
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.datasets import make_friedman1
from sklearn.ensemble import GradientBoostingRegressor


def cleanToPandas(filePath):
    cleaned = pd.read_csv(filePath, index_col=None, na_values=['.'])
    cleaned = cleaned.fillna(method='ffill')
    return cleaned


def formatForRegression(series):
    x = series.index.values
    x = np.matrix(x).T
    y = series.values
    y = np.matrix(y).T
    return x, y


def volatilityByDay(series, depth):
    x, y = formatForRegression(series)
    regr = linear_model.LinearRegression()
    values = np.zeros(len(series))

    for i in range(depth+1, len(y)):
        regr.fit(x[i - depth:i], y[i - depth:i])
        m = regr.coef_[0]
        b = regr.intercept_
        est = m * i + b
        error = abs(est - y[i])
        values[i] = error.item(0)

    return values


def rollingAverage(data, depth):
    rolling = pd.rolling_mean(pd.DataFrame(data), depth)
    rolling = rolling.fillna(0)
    rolling = rolling[0].values
    return rolling


def plotAll(original, volt, voltAv):
    x, y = formatForRegression(original['SP500'])
    plt.figure(figsize=(10, 5))
    plt.plot(x, y, color='r', label='S&P 500 (Market Value)')
    plt.plot(x, volt*10, label='Volatility (Residual of 150 Day Regression)')
    plt.plot(x, voltAv*10, linewidth=3.0, label='Volatility (100 Day Moving Average)')
    plt.xticks(x[::365], original['DATE'][::365])
    plt.title('S&P 500 Volatility\nMeasured as the Predictive Ersror of 150 Day Regressions')
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Dollars', fontsize=12)
    plt.legend(loc='upper right')
    plt.ylim([0, 3200])
    plt.show()

sp500 = cleanToPandas('/Users/josephokeefe/Desktop/Data/SP500.csv')
BOALynch = cleanToPandas('/Users/josephokeefe/Desktop/Data/BAMLH0A0HYM2.csv')
DGS10 = cleanToPandas('/Users/josephokeefe/Desktop/Data/DGS10.csv')
FFR = cleanToPandas('/Users/josephokeefe/Desktop/Data/FEDFUNDS.csv')
T10Y2Y = cleanToPandas('/Users/josephokeefe/Desktop/Data/T10Y2Y.csv')
USROA = cleanToPandas('/Users/josephokeefe/Desktop/Data/USROA.csv')
USROE = cleanToPandas('/Users/josephokeefe/Desktop/Data/USROE.csv')

a = pd.merge(BOALynch, DGS10, on='DATE', how='left')
b = pd.merge(a, FFR, on='DATE', how='left')
c = pd.merge(b, T10Y2Y, on='DATE', how='left')
d = pd.merge(c, USROA, on='DATE', how='left')
e = pd.merge(d, USROE, on='DATE', how='left')
f = pd.merge(e, sp500, on='DATE', how='left')
f = f.fillna(method='ffill')
f = f.fillna(method='bfill')
del f['DATE']

volatility = volatilityByDay(f['SP500'], 150)
volatilityAverage = rollingAverage(volatility, 100)

del f['SP500']

X = f.as_matrix()
y = volatilityAverage

# plotAll(sp500, volatility[:2481], volatilityAverage[:2481])

X_train, X_test = X[300:], X[300:]
y_train, y_test = y[300:], y[300:]

est = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=1, random_state=0, loss='ls').fit(X_train, y_train)

result = mean_squared_error(y_test, est.predict(X_test))


volt = volatility[:2481]
voltAv = volatilityAverage[:2481]

x, y = formatForRegression(sp500['SP500'])
plt.figure(figsize=(10, 5))
plt.plot(x, y, color='r', label='S&P 500 (Market Value)')
plt.plot(x, volt*10, label='Volatility (Residual of 150 Day Regression)')
plt.plot(x, voltAv*10, linewidth=3.0, label='Volatility (100 Day Moving Average)')
plt.plot(f.index.values, est.predict(X)*10, linewidth=3.0, color='b')
plt.xticks(x[::365], sp500['DATE'][::365])
plt.title('S&P 500 Volatility\nMeasured as the Predictive Ersror of 150 Day Regressions')
plt.xlabel('Date', fontsize=12)
plt.ylabel('Dollars', fontsize=12)
plt.legend(loc='upper right')
plt.ylim([0, 3200])
plt.show()

print(result)

